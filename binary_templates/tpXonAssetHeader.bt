typedef struct {
	struct {
		uint32 numUnknownAssets;
		local uint32 unknownAssetsStartOffset = FTell();
		uint32 offsetToUnknownAssets;

		uint32 numUnknownPaths;
		local uint32 unknownPathsStartOffset = FTell();
		uint32 offsetToUnknownPaths;
	} header;

	FSeek(header.unknownAssetsStartOffset + header.offsetToUnknownAssets);
	if (header.numUnknownAssets != 0) {
		struct {
			local uint32 unknownIDStartOffset = FTell();
			uint32 offsetToUnknownID;

			FSeek(unknownIDStartOffset + offsetToUnknownID);

			uint32 unknownID <format=hex>;
			uint32 unknownThing1;

			if (unknownThing1 == 0) return;

			local uint32 stringStartOffset = FTell();
			uint32 offsetToString;
			local uint32 returnPos = FTell();

			FSeek(stringStartOffset + offsetToString);
			string unknownString;
			FSeek(returnPos);

			uint32 unknown2Count;
			local uint32 unknown2StartOffset = FTell();
			uint32 offsetToUnknown2;

			uint32 numTextures;
			local uint32 texturesStartOffset = FTell();
			uint32 offsetToTextures;

			uint32 numUnknownTPVars;
			local uint32 unknownTPVarsStartOffset = FTell();
			uint32 offsetToUnknownTPVars;

			uint32 unknownUInt32s[2];
			short unknownShort;

			FSeek(unknown2StartOffset + offsetToUnknown2);
			struct {
				uint32 unknownID <format=hex>;

				local uint32 stringStartOffset = FTell();
				uint32 offsetToString;
				local uint32 returnPos = FTell();

				FSeek(stringStartOffset + offsetToString);
				string unknownString;
				FSeek(returnPos);

				uint32 unknownUInt32_0;
				uint32 parameterCount;
				local uint32 unknown1StartOffset = FTell();
				uint32 offsetToUnknown1;
			} materialParameterHeader[unknown2Count] <optimize=false>;

			local int i;
			for (i = 0; i < unknown2Count; i++) {
				struct {
					FSeek(materialParameterHeader[i].unknown1StartOffset + materialParameterHeader[i].offsetToUnknown1);
					struct {
						uint32 unknownID <format=hex>;
						
						local uint32 stringStartOffset = FTell();
						uint32 offsetToString;
						local uint32 returnPos = FTell();

						FSeek(stringStartOffset + offsetToString);
						string unknownString;
						FSeek(returnPos);

						uint32 unknownUInt32_1 <format=hex>;
						uint32 unknownUInt32_2;
						uint32 unknownUInt32_3;
						uint32 unknownUInt32_4;
						uint32 unknownUInt32_5;
						uint32 unknownUInt32_6;
						byte unknownByte;

						alignRelative(0, 4);
					} materialParameter[materialParameterHeader[i].parameterCount] <optimize=false>;
				} materialParameters;
			}

			FSeek(texturesStartOffset + offsetToTextures);
			struct {
				struct {
					uint32 unknownID <format=hex>;

					local uint32 stringStartOffset = FTell();
					uint32 offsetToString;
					local uint32 returnPos = FTell();

					FSeek(stringStartOffset + offsetToString);
					string unknownString;
					FSeek(returnPos);

					uint32 unknownID2 <format=hex>;
					
					local uint32 stringStart2Offset = FTell();
					uint32 offsetToString2;
					local uint32 returnPos2 = FTell();

					FSeek(stringStart2Offset + offsetToString2);
					string unknownString2;
					FSeek(returnPos2);

					byte unknownByte;
					alignRelative(0, 4);
				} texture[numTextures] <optimize=false>;
			} textures;

			FSeek(unknownTPVarsStartOffset + offsetToUnknownTPVars);
			struct {
				struct {
					uint32 unknownID <format=hex>;
					
					local uint32 stringStartOffset = FTell();
					uint32 offsetToString;
					local uint32 returnPos = FTell();

					FSeek(stringStartOffset + offsetToString);
					string unknownString;
					FSeek(returnPos);

					uint32 unknownUInt32_1;
					uint32 unknownUInt32_2;
					uint32 unknownUInt32_3;
				} unknownTPVar[numUnknownTPVars] <optimize=false>;
			} unknownTPVars;
		} asset[header.numUnknownAssets] <optimize=false>;
	}

	if (header.numUnknownPaths != 0) {
		FSeek(header.unknownPathsStartOffset + header.offsetToUnknownPaths);
		struct {
			struct {
				uint32 unknownID <format=hex>;
				
				local uint32 pathStartOffset = FTell();
				uint32 offsetToPath;
				local uint32 returnPos = FTell();

				FSeek(pathStartOffset + offsetToPath);
				string path;
				FSeek(returnPos);

				uint32 unknownUInt32;
			} unknownPath[header.numUnknownPaths] <optimize=false>;
		} unknownPaths;
	}
} tpGxAssetHeader;