// Woeful_Wolf

struct {
	struct {
		struct {
			float x;
			float y;
			float z;
		} boundingBoxCoord1;
		struct {
			float x;
			float y;
			float z;
		} boundingBoxCoord2;
		uint32	totalVertexDataSize;
		uint32  unknownFlag <format=hex>;
		uint32	totalIndicesDataSize;
		ushort	unknownShort0;
		ushort	unknownShort1;
		float unknownFloat;
		uint32	boneCount;
		local uint32 bonesStartOffset = FTell();
		uint32	offsetToBones;
		uint32 	boneDataCount;
		local uint32 bonesDataStartOffset = FTell();
		uint32	offsetToBonesData;
		uint32 	objectGroupCount;
		local uint32 objectGroupsStartOffset = FTell();
		uint32	offsetToObjectGroups;
		uint32 	materialCount;
		local uint32 materialsStartOffset = FTell();
		uint32	offsetToMaterials;
		uint32 	objectCount;
		local uint32 objectsStartOffset = FTell();
		uint32	offsetToObjects;
	} header;

	FSeek( header.bonesStartOffset + header.offsetToBones );
	struct {
	struct {
		local uint32 nameStartOffset = FTell();
		uint32  offsetToName;
		local uint32 returnPos = FTell();
		FSeek(nameStartOffset + offsetToName);
		string name;
		FSeek(returnPos);
		int32	parentBoneIndex;
		float   unknownFloats[10];
	} bone[header.boneCount] <optimize=false>;
	} bones;

	FSeek( header.bonesDataStartOffset + header.offsetToBonesData );
	struct {
	struct {
		local uint32 nameStartOffset = FTell();
		uint32  offsetToName;
		local uint32 returnPos = FTell();
		FSeek(nameStartOffset + offsetToName);
		string name;
		FSeek(returnPos);
		int32	unknownParentIndex;
		float	unknownFloat;
		float   unknownMatrix0[16];
		float   unknownMatrix1[16];
	} boneData[header.boneDataCount] <optimize=false>;
	} bonesData;

	FSeek( header.objectGroupsStartOffset + header.offsetToObjectGroups );
	struct {
	struct {
		uint32  unknownUInt32_0;
		uint32  unknownUInt32_1;
		uint32  unknownUInt32_2;
		uint32  vertexCount;
		uint32  indicesCount;
		uint32  unknownUInt32_5;
		uint32  unknownUInt32_6;
		uint32  vertexDataCount;
		local uint32 vertexDataStartOffset = FTell();
		uint32  offsetToVertexData;
		
		local uint32 returnPos = FTell();
		FSeek(vertexDataStartOffset + offsetToVertexData);
		struct {
			uint32  objectGroupVertexDataOffset;
			uint32  unknownUInt32_1;
			uint32  unknownUInt32_2;
			uint32  unknownStructSize;
			byte	unknownIndex <comment="">;
			FSeek(((FTell() / 8) + 1) * 8);
		} vertexData[vertexDataCount] <optimize=false>;

		FSeek(returnPos);
		FSeek(((FTell() / 8) + 1) * 8);
	} objectGroup[header.objectGroupCount] <optimize=false>;
	} objectGroups;

	FSeek( header.materialsStartOffset + header.offsetToMaterials );
	struct {
	struct {
		local uint32 nameStartOffset = FTell();
		uint32 offsetToName;
		local uint32 unknownByteStartOffset = FTell();
		uint32 offsetToUnknownByte;
		uint32 unknownUInt32;
		local uint32 returnPos = FTell();
		FSeek(nameStartOffset + offsetToName);
		string name;
		FSeek(unknownByteStartOffset + offsetToUnknownByte);
		byte unknownByte;
		FSeek(returnPos);
	} material[header.materialCount] <optimize=false>;
	} materials;

	FSeek( header.objectsStartOffset + header.offsetToObjects );
	struct {
	struct {
		uint32 objectGroupIndex;
		uint32 materialIndex;
		uint32 unknownStartIndex;
		uint32 indicesCount;
		struct {
			float x;
			float y;
			float z;
		} boundingBoxCoord1;
		struct {
			float x;
			float y;
			float z;
		} boundingBoxCoord2;
	} object[header.objectCount] <optimize=false>;
	} objects;

	local uint32 assetResourceStart = FTell();
	local int i;
	local int k;
	for (i = 0; i < header.objectGroupCount; i++) {
		struct {
			for (k = 0; k < objectGroups.objectGroup[i].vertexDataCount; k++) {
				FSeek(assetResourceStart + objectGroups.objectGroup[i].vertexData[k].objectGroupVertexDataOffset);
				struct {
					if (objectGroups.objectGroup[i].vertexData[k].unknownStructSize == 12) {
						struct {
							float x;
							float y;
							float z;
						} unknownStruct[objectGroups.objectGroup[i].vertexCount];
					}
					if (objectGroups.objectGroup[i].vertexData[k].unknownStructSize == 4) {
						struct {
							ubyte unknownBytes[4];
						} unknownStruct[objectGroups.objectGroup[i].vertexCount];
					}

				} vertexData;
			}
		} objectGroupVertexData;
	}
	
	FSeek(((FTell() / 128) + 1) * 128);
	struct {

	} objectGroupIndices;

} tpGxMeshHead;