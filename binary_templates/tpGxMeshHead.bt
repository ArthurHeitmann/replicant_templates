// Woeful_Wolf

struct {
	struct {
		struct {
			float x;
			float y;
			float z;
		} boundingBoxCoord1;
		struct {
			float x;
			float y;
			float z;
		} boundingBoxCoord2;
		uint32	resourceSize;
		uint32  unknownFlag <format=hex>;
		uint32	unknownUInt32_1;
		ushort	unknownShort0;
		ushort	unknownShort1;
		ushort	unknownShort2;
		ushort	unknownShort3;
		uint32	unknownCount0 <comment="boneCount">;
		local uint32 unknown0StartOffset = FTell();
		uint32	offsetToUnknown0;
		uint32 	unknownCount1 <comment="boneDataCount">;
		local uint32 unknown1StartOffset = FTell();
		uint32	offsetToUnknown1;
		uint32 	unknownCount2 <comment="">;
		local uint32 unknown2StartOffset = FTell();
		uint32	offsetToUnknown2;
		uint32 	unknownCount3 <comment="materialCount">;
		local uint32 unknown3StartOffset = FTell();
		uint32	offsetToUnknown3;
		uint32 	unknownCount4 <comment="objectGroupCount">;
		local uint32 unknown4StartOffset = FTell();
		uint32	offsetToUnknown4;
	} header;

	FSeek( header.unknown0StartOffset + header.offsetToUnknown0 );
	struct {
	struct {
		local uint32 nameStartOffset = FTell();
		uint32  offsetToName;
		local uint32 returnPos = FTell();
		FSeek(nameStartOffset + offsetToName);
		string name <comment="boneName?">;
		FSeek(returnPos);
		int32	unknownInt32 <comment="parentBoneIndex?">;
		float   unknownFloat[10];
	} unknown0[header.unknownCount0] <optimize=false>;
	} unknown0 <comment="bones">;

	FSeek( header.unknown1StartOffset + header.offsetToUnknown1 );
	struct {
	struct {
		local uint32 nameStartOffset = FTell();
		uint32  offsetToName;
		local uint32 returnPos = FTell();
		FSeek(nameStartOffset + offsetToName);
		string name;
		FSeek(returnPos);
		int32	unknownInt32;
		float   unknownFloat[33];
	} unknown1[header.unknownCount1] <optimize=false>;
	} unknown1 <comment="bonesData">;

	FSeek( header.unknown2StartOffset + header.offsetToUnknown2 );
	struct {
		struct {
			uint32  unknownUInt32[7];
			uint32  unknownACount;
			local uint32 unknownAStartOffset = FTell();
			uint32  offsetToUnknownA;
		} UnknownHead;

		FSeek( UnknownHead.unknownAStartOffset + UnknownHead.offsetToUnknownA );

	struct {
		struct {
			uint32  unknownIndexStart <comment="">;
			uint32  unknownUInt32[3];
			byte	unknownIndex <comment="">;
			FSeek(((FTell() / 8) + 1) * 8);
		} unknownA[UnknownHead.unknownACount] <optimize=false, comment="">;
		FSeek(((FTell() / 8) + 1) * 8);
	} unknownA[header.unknownCount2] <optimize=false, comment="">;
	} unknown2 <comment="">; 

	FSeek( header.unknown3StartOffset + header.offsetToUnknown3 );
	struct {
	struct {
		local uint32 nameStartOffset = FTell();
		uint32 offsetToName;
		local uint32 unknownByteStartOffset = FTell();
		uint32 offsetToUnknownByte;
		uint32 unknownUInt32;
		local uint32 returnPos = FTell();
		FSeek(nameStartOffset + offsetToName);
		string name;
		FSeek(unknownByteStartOffset + offsetToUnknownByte);
		byte unknownByte;
		FSeek(returnPos);
	} unknown3[header.unknownCount3] <optimize=false>;
	} unknown3 <comment="materials">;

	FSeek( header.unknown4StartOffset + header.offsetToUnknown4 );
	struct {
	struct {
		uint32 unknownUInt32_0 <comment="objectGroupIndex">;
		uint32 unknownUInt32_1 <comment="materialIndex">;
		uint32 unknownUInt32_2 <comment="vertexStartIndex">;
		uint32 unknownUInt32_3 <comment="vertexCount">;
		struct {
			float x;
			float y;
			float z;
		} boundingBoxCoord1;
		struct {
			float x;
			float y;
			float z;
		} boundingBoxCoord2;
	} unknown4[header.unknownCount4] <optimize=false>;
	} unknown4 <comment="objectGroups">;

	struct {

	} vertices[header.unknownCount4];

} tpGxMeshHead;