// Woeful_Wolf

struct {
	struct {
		struct {
			float x;
			float y;
			float z;
		} boundingBoxCoord1;
		struct {
			float x;
			float y;
			float z;
		} boundingBoxCoord2;
		uint32	meshResourceSize;
		uint32  unknownFlag <format=hex>;
		uint32	unknownSize;
		ushort	unknownShort0;
		ushort	unknownShort1;
		ushort	unknownShort2;
		ushort	unknownShort3;
		uint32	boneCount;
		local uint32 bonesStartOffset = FTell();
		uint32	offsetToBones;
		uint32 	boneDataCount;
		local uint32 bonesDataStartOffset = FTell();
		uint32	offsetToBonesData;
		uint32 	unknownCount2;
		local uint32 unknown2StartOffset = FTell();
		uint32	offsetToUnknown2;
		uint32 	materialCount;
		local uint32 materialsStartOffset = FTell();
		uint32	offsetToMaterials;
		uint32 	objectGroupCount;
		local uint32 objectGroupsStartOffset = FTell();
		uint32	offsetToObjectGroups;
	} header;

	FSeek( header.bonesStartOffset + header.offsetToBones );
	struct {
	struct {
		local uint32 nameStartOffset = FTell();
		uint32  offsetToName;
		local uint32 returnPos = FTell();
		FSeek(nameStartOffset + offsetToName);
		string name;
		FSeek(returnPos);
		int32	parentBoneIndex;
		float   unknownFloats[10];
	} bone[header.boneCount] <optimize=false>;
	} bones;

	FSeek( header.bonesDataStartOffset + header.offsetToBonesData );
	struct {
	struct {
		local uint32 nameStartOffset = FTell();
		uint32  offsetToName;
		local uint32 returnPos = FTell();
		FSeek(nameStartOffset + offsetToName);
		string name;
		FSeek(returnPos);
		int32	unknownInt32;
		float   unknownFloat[33];
	} boneData[header.boneDataCount] <optimize=false>;
	} bonesData;

	FSeek( header.unknown2StartOffset + header.offsetToUnknown2 );
	struct {
		struct {
			uint32  unknownUInt32_0;
			uint32  unknownUInt32_1;
			uint32  unknownUInt32_2;
			uint32  unknownUInt32_3;
			uint32  unknownUInt32_4 <comment="Sometimes matches total unknownDataSize if only 1 objectGroup">;
			uint32  unknownUInt32_5;
			uint32  unknownUInt32_6;
			uint32  unknownACount;
			local uint32 unknownAStartOffset = FTell();
			uint32  offsetToUnknownA;
		} unknown2Head;

		FSeek( unknown2Head.unknownAStartOffset + unknown2Head.offsetToUnknownA );

	struct {
		struct {
			uint32  unknownUInt32_0;
			uint32  unknownUInt32_1;
			uint32  unknownUInt32_2;
			uint32  unknownUInt32_3;
			byte	unknownIndex <comment="">;
			FSeek(((FTell() / 8) + 1) * 8);
		} unknownA[unknown2Head.unknownACount] <optimize=false>;
		FSeek(((FTell() / 8) + 1) * 8);
	} unknownA[header.unknownCount2] <optimize=false>;
	} unknown2; 

	FSeek( header.materialsStartOffset + header.offsetToMaterials );
	struct {
	struct {
		local uint32 nameStartOffset = FTell();
		uint32 offsetToName;
		local uint32 unknownByteStartOffset = FTell();
		uint32 offsetToUnknownByte;
		uint32 unknownUInt32;
		local uint32 returnPos = FTell();
		FSeek(nameStartOffset + offsetToName);
		string name;
		FSeek(unknownByteStartOffset + offsetToUnknownByte);
		byte unknownByte;
		FSeek(returnPos);
	} material[header.materialCount] <optimize=false>;
	} materials;

	FSeek( header.objectGroupsStartOffset + header.offsetToObjectGroups );
	struct {
	struct {
		uint32 objectGroupIndex;
		uint32 materialIndex;
		uint32 unknownDataStartOffset;
		uint32 unknownDataSize;
		struct {
			float x;
			float y;
			float z;
		} boundingBoxCoord1;
		struct {
			float x;
			float y;
			float z;
		} boundingBoxCoord2;
	} objectGroup[header.objectGroupCount] <optimize=false>;
	} objectGroups;

	struct {
		float x;
		float y;
		float z;
	} test_vertices[objectGroups.objectGroup[0].unknownDataSize/12];

} tpGxMeshHead;